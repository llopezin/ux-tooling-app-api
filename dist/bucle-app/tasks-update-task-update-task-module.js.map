{"version":3,"sources":["./src/app/tasks/update-task/services/update-task.service.ts","./src/app/tasks/update-task/update-task.component.ts","./src/app/tasks/update-task/update-task.component.html","./src/app/tasks/update-task/update-task-routing.module.ts","./src/app/tasks/update-task/update-task.module.ts","./src/app/tasks/update-task/components/update-card-sorting/update-card-sorting.component.ts","./src/app/tasks/update-task/components/update-card-sorting/update-card-sorting.component.html","./src/app/tasks/update-task/components/update-tree-test/update-tree-test.component.ts","./src/app/tasks/update-task/components/update-tree-test/update-tree-test.component.html","./src/app/tasks/update-task/components/update-survey/update-survey.component.ts","./src/app/tasks/update-task/components/update-survey/update-survey.component.html"],"names":[],"mappings":";;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAA+D;;;;AASxD,MAAM,iBAAiB;IAI5B,YAAoB,IAAgB,EAAU,SAA2B;QAArD,SAAI,GAAJ,IAAI,CAAY;QAAU,cAAS,GAAT,SAAS,CAAkB;QAFjE,iBAAY,GAAG,MAAM;IAEgD,CAAC;IAE9E,OAAO,CAAC,EAAE;QACR,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAO,GAAG,IAAI,CAAC,YAAY,UAAU,EAAE,EAAE,CAAC;IAChE,CAAC;IAED,UAAU,CAAC,EAAE,EAAE,WAAW;QACxB,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;QACnC,MAAM,OAAO,GAAG,IAAI,gEAAW,CAAC,EAAE,eAAe,EAAE,UAAU,KAAK,EAAE,EAAE,CAAC,CAAC;QAExE,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAO,GAAG,IAAI,CAAC,YAAY,iBAAiB,EAAE,EAAE,EAAE,WAAW,EAAE,EAAE,OAAO,EAAE,CAAC;IACjG,CAAC;;kFAfU,iBAAiB;oGAAjB,iBAAiB,WAAjB,iBAAiB,mBAFhB,MAAM;;;;;;;;;;;;;ACPpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiF;;;;;;;;;;;ICiBjE,sEAAsD;IAAA,2EAAgB;IAAA,4DAAM;;;IADhF,sEAA6C;IACzC,qHAA4E;IAChF,4DAAM;;;IADI,0DAA8C;IAA9C,uKAA8C;;;IAapD,sEAA0D;IAAA,wFAA6B;IAAA,4DAAM;;;IADjG,sEAAsD;IAClD,sHAA6F;IACjG,4DAAM;;;IADI,0DAAkD;IAAlD,oLAAkD;;;;IAW5D,wFAA0F;IAAvE,8WAAqC;IAAkC,4DAAoB;;;IAArD,6EAAa;;;IACtE,qFAAyF;;;IACzF,kFAAgF;;;IAQpF,0EAAgE;IAC5D,0EAA2B;IAAA,iEAAW;IAAA,iEAAW;IAAA,iEAAW;IAAA,4DAAM;IAClE,wEAAkC;IAAA,wEAAa;IAAA,4DAAI;IACvD,4DAAM;;;IAEN,0EAA+D;IAC3D,2EAAoD;IAAA,iEAAC;IAAA,4DAAO;IAC5D,wEAAkC;IAAA,uEAAY;IAAA,4DAAI;IACtD,4DAAM;;;IAXV,0EAAkE;IAG9D,uHAGM;IAEN,uHAGM;IAGV,4DAAM;;;IAX2C,0DAAiB;IAAjB,oFAAiB;IAKjB,0DAAgB;IAAhB,mFAAgB;;ADzC9D,MAAM,mBAAmB;IAY9B,YACU,EAAe,EACf,KAAsB,EACtB,MAAc,EACd,KAAqB,EACrB,WAA8B;QAJ9B,OAAE,GAAF,EAAE,CAAa;QACf,UAAK,GAAL,KAAK,CAAiB;QACtB,WAAM,GAAN,MAAM,CAAQ;QACd,UAAK,GAAL,KAAK,CAAgB;QACrB,gBAAW,GAAX,WAAW,CAAmB;QAGtC,IAAI,CAAC,IAAI,GAAG,IAAI,0DAAW,CAAC,GAAG,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;QACxD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QACnE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QAC3D,IAAI,CAAC,QAAQ,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,aAAa,EAAE,EAAE,EAAE;QAC/C,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC;IAEhC,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,EAAC,CAAC,CAAC;IAC5G,CAAC;IAED,UAAU,CAAC,EAAE,IAAI,EAAE,aAAa,EAAE;QAEhC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YAE/B,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACnC,aAAa,EAAE,CAAC,aAAa,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;SAEzE,CAAC,CAAC;IAEL,CAAC;IAED,YAAY,CAAC,EAAE,SAAS,EAAE;QACxB,IAAI,CAAC,IAAI,mCAAQ,IAAI,CAAC,WAAW,CAAC,KAAK,KAAE,SAAS,EAAE,GAAG,EAAE,IAAI,CAAC,OAAO,GAAE;QAEvE,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE;YACnE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;YACvB,IAAI,CAAC,kBAAkB,EAAE;QAC3B,CAAC,CAAC;QAEF,oBAAoB;QAEpB,IAAI,CAAC,WAAW,GAAG,IAAI;IACzB,CAAC;IAED,kBAAkB;QAChB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,YAAY,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;IACxD,CAAC;;sFA1DU,mBAAmB;mGAAnB,mBAAmB;QChBhC,yEAA8C;QAG1C,wEAAmC;QAChC,uDACH;QAAA,4DAAK;QAGL,0EAA8G;QAG1G,yEAAsB;QAElB,2EAAuB;QAAA,+DAAI;QAAA,4DAAQ;QACnC,sEAC2C;QAE3C,+GAEM;QAEV,4DAAM;QAGN,yEAAsB;QAElB,4EAAwB;QAAA,0EAAc;QAAA,4DAAQ;QAC9C,uEACqD;QAErD,iHAEM;QAEV,4DAAM;QAGV,4DAAO;QAGH,uEAAK;QAED,6IAA8G;QAC9G,yJAAyF;QACzF,mJAAgF;QAEpF,4DAAM;QAGV,kHAcM;QAGV,4DAAM;;QA9DC,0DACH;QADG,mHACH;QAGoF,0DAAyB;QAAzB,sFAAyB;QAS/F,0DAAqC;QAArC,mGAAqC;QAarC,0DAA8C;QAA9C,4GAA8C;QAYoB,0DAAgB;QAAhB,yGAAgB;QAC9D,0DAAmC;QAAnC,8HAAmC;QACtC,0DAAgC;QAAhC,2HAAgC;QAK9B,0DAA+B;QAA/B,mGAA+B;;;;;;;;;;;;;;ACjDpE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuD;AAGO;AACc;;;AAE5E,MAAM,MAAM,GAAW;IACvB,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,0EAAmB,EAAE,WAAW,EAAE,CAAC,yFAAgB,CAAC,EAAE;CAC5E,CAAC;AAMK,MAAM,wBAAwB;;gGAAxB,wBAAwB;uGAAxB,wBAAwB;2GAH1B,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAC9B,4DAAY;mIAEX,wBAAwB,uFAFzB,4DAAY;;;;;;;;;;;;;ACXxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACkB;AACM;AACV;AAC8B;AACiB;AACT;;AAc5F,MAAM,iBAAiB;;kFAAjB,iBAAiB;gGAAjB,iBAAiB;oGAPnB;YACP,4DAAY;YACZ,oFAAwB;YACxB,0DAAW;YACX,kEAAmB;SACpB;mIAEU,iBAAiB,mBARb,0EAAmB,EAAE,uGAAqB,EAAE,wHAA0B,EAAE,+GAAuB,aAE5G,4DAAY;QACZ,oFAAwB;QACxB,0DAAW;QACX,kEAAmB;;;;;;;;;;;;;;;;;ACXhB,MAAM,0BAA0B;IAErC,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;oGALU,0BAA0B;0GAA1B,0BAA0B;QCPvC,oEAAG;QAAA,qFAA0B;QAAA,4DAAI;;;;;;;;;;;;;;;;;;ACO1B,MAAM,uBAAuB;IAElC,gBAAgB,CAAC;IAEjB,QAAQ;IACR,CAAC;;8FALU,uBAAuB;uGAAvB,uBAAuB;QCPpC,oEAAG;QAAA,kFAAuB;QAAA,4DAAI;;;;;;;;;;;;;;ACA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+E;AACa;;;;;;ICsB5E,0EAA6D;IAEzD,4EAA4B;IAAA,kEAAO;IAAA,4DAAQ;IAC3C,uEAC4E;IAEhF,4DAAM;;;IAJK,0DAAoB;IAApB,iFAAoB;IAE2B,0DAAmB;IAAnB,gFAAmB;;;IAK7E,0EAAsE;IAElE,uEAC6B;IAC7B,4EAAoD;IAAA,gGAAqC;IAAA,4DAAQ;IAErG,4DAAM;;;IAHF,0DAA0B;IAA1B,uFAA0B;IACF,0DAA2B;IAA3B,wFAA2B;;;IAIvD,0EAA0D;IAEtD,4EAAyB;IAAA,+DAAI;IAAA,4DAAQ;IACrC,oEAAG;IAAA,qIAA0E;IAAA,4DAAI;IACjF,uEACmE;IAEvE,4DAAM;;;IALK,0DAAiB;IAAjB,8EAAiB;IAGwB,0DAAgB;IAAhB,6EAAgB;;;;IAtC5E,yEAAuG;IAE/F,wEAAkC;IAAA,uDAAgB;IAAA,4DAAK;IAGnD,4EAAgF;IAA5B,2VAA2B;IAAC,iEAAM;IAAA,4DAAS;IAGnG,0EAAsB;IAElB,4EAAgD;IAAA,mEAAQ;IAAA,4DAAQ;IAChE,uEACiF;IAErF,4DAAM;IAEN,wHAMM;IAGN,0HAMM;IAEN,0HAOM;IAEd,4DAAM;;;;IA1C6E,+EAAmB;IAE5D,0DAAgB;IAAhB,2FAAgB;IAQpB,0DAAqB;IAArB,kFAAqB;IAE3C,0DAAsB;IAAtB,mFAAsB;IAIP,0DAAoC;IAApC,2IAAoC;IASpC,0DAA6C;IAA7C,4GAA6C;IAQ7C,0DAAiC;IAAjC,qIAAiC;;AD7BjE,MAAM,qBAAqB;IAMhC,YAAoB,EAAe,EAAU,KAAsB;QAA/C,OAAE,GAAF,EAAE,CAAa;QAAU,UAAK,GAAL,KAAK,CAAiB;QAHzD,iBAAY,GAAsB,IAAI,0DAAY,EAAE,CAAC;IAI/D,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,UAAU,EAAE;IACnB,CAAC;IAED,UAAU;QACR,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YACjC,SAAS,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC;SAClD,CACA,CAAC;IACJ,CAAC;IAED,WAAW,CAAC,IAAI;QACd,QAAQ,IAAI,EAAE;YACZ,KAAK,SAAS;gBACZ,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC;gBACrD,MAAM;YAER,KAAK,QAAQ;gBACX,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE,CAAC;gBACzD,MAAM;SACT;IACH,CAAC;IAED,cAAc,CAAC,CAAC;QACd,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC;IACnC,CAAC;IAED,gBAAgB;QAEd,OAAO,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,cAAc,EAAE,IAAI,EAAE,EAAE,EAAE;YAEnF,OAAO,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;gBACnB,QAAQ,EAAE,CAAC,QAAQ,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;gBAC3C,IAAI,EAAE,CAAC,IAAI,CAAC;gBACZ,OAAO,EAAE,CAAC,OAAO,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;gBACzC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;gBACnC,cAAc,EAAE,CAAC,cAAc,CAAC;aAEjC,CAAC;QAEJ,CAAC,CAAC;IAEJ,CAAC;IAED,kBAAkB;QAChB,OAAO,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YACnB,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACrC,IAAI,EAAE,CAAC,SAAS,CAAC;YACjB,OAAO,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACpC,cAAc,EAAE,CAAC,KAAK,CAAC;SACxB,CAAC,CAAC;IACL,CAAC;IAED,sBAAsB;QACpB,OAAO,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YACnB,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACrC,IAAI,EAAE,CAAC,QAAQ,CAAC;YAChB,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;SAClC,CAAC,CAAC;IACL,CAAC;IAED,QAAQ;QACL,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC;IACnD,CAAC;IAED,IAAI,gBAAgB;QAClB,OAAO,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,WAAW,CAAc,CAAC;IAC1D,CAAC;;0FA5EU,qBAAqB;qGAArB,qBAAqB;QCXlC,wEAAmC;QAAA,oEAAS;QAAA,4DAAK;QAEjD,0EAA4H;QAApD,iJAAY,cAAU,IAAC;QAG3F,yEAA+B;QAE3B,kHA0CM;QAEV,4DAAM;QAEN,yEAAwC;QACpC,4EAAiF;QAAjC,6IAAS,gBAAY,SAAS,CAAC,IAAC;QAAC,+EAAoB;QAAA,4DAAS;QAC9G,4EAAgF;QAAhC,6IAAS,gBAAY,QAAQ,CAAC,IAAC;QAAC,qFAA0B;QAAA,4DAAS;QACvH,4DAAM;QAEV,4DAAO;QAEP,6EAAwF;QAArB,8IAAS,cAAU,IAAC;QAAC,uEAAW;QAAA,4DAAS;;QA1DZ,0DAA2B;QAA3B,wFAA2B;QAK3E,0DAA8B;QAA9B,kGAA8B","file":"tasks-update-task-update-task-module.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { Task } from 'src/app/campaign/models/task.model';\r\nimport {UserStoreService} from 'src/app/shared/services/user-store.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class updateTaskService {\r\n\r\n  private API_ENDPOINT = \"/api\"\r\n\r\n  constructor(private http: HttpClient, private userStore: UserStoreService) { }\r\n\r\n  getTask(id): Observable<Task> {\r\n    return this.http.get<Task>(`${this.API_ENDPOINT}/tasks/${id}`)\r\n  }\r\n\r\n  updateTask(id, updatedTask): Observable<Task> {\r\n    const token = this.userStore.token;\r\n    const headers = new HttpHeaders({ 'Authorization': `Bearer ${token}` });\r\n\r\n    return this.http.put<Task>(`${this.API_ENDPOINT}/tasks/update/${id}`, updatedTask, { headers })\r\n  }\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { AppState } from 'src/app/app.reducers';\nimport { Task } from 'src/app/campaign/models/task.model';\nimport { Campaign } from 'src/app/dashboard/models/campaign.model';\nimport { addTask } from 'src/app/shared/store/workspace-store/workspace.actions';\nimport { TasksModule } from '../create-task/create-task.module';\nimport { updateTaskService } from './services/update-task.service';\n\n@Component({\n  selector: 'app-update-task',\n  templateUrl: './update-task.component.html',\n  styleUrls: ['./update-task.component.css']\n})\nexport class UpdateTaskComponent implements OnInit {\n\n  public newTaskForm: FormGroup;\n  public type: FormControl;\n  public task_id: string;\n  public campaign_id: string;\n  public taskPosting: boolean;\n  public taskPosted: boolean;\n  public task: Task;\n  public campaign: Campaign\n  public nullTask: { name: any, usersRequired: any }\n\n  constructor(\n    private fb: FormBuilder,\n    private store: Store<AppState>,\n    private router: Router,\n    private route: ActivatedRoute,\n    private taskService: updateTaskService,\n  ) {\n\n    this.type = new FormControl(' ', [Validators.required]);\n    this.campaign_id = this.route.snapshot.paramMap.get('campaign_id');\n    this.task_id = this.route.snapshot.paramMap.get('task_id');\n    this.nullTask = { name: \"\", usersRequired: \"\" }\n    this.updateForm(this.nullTask)\n\n  }\n\n  ngOnInit(): void {\n    this.taskService.getTask(this.task_id).subscribe(task => { this.task = task; this.updateForm(this.task) })\n  }\n\n  updateForm({ name, usersRequired }) {\n\n    this.newTaskForm = this.fb.group({\n\n      name: [name, [Validators.required]],\n      usersRequired: [usersRequired, [Validators.required, Validators.min(1)]],\n\n    });\n\n  }\n\n  updateSurvey({ questions }) {\n    this.task = { ...this.newTaskForm.value, questions, _id: this.task_id }\n\n    this.taskService.updateTask(this.task_id, this.task).subscribe(res => {\n      this.taskPosted = true;\n      this.navigateToCampaign()\n    })\n\n    //dispatch get tasks\n\n    this.taskPosting = true\n  }\n\n  navigateToCampaign(){\n    this.router.navigate([`campaign/${this.campaign_id}`])\n  }\n\n}\n","<div class=\"[ max-w-screen-lg mx-auto pt-8 ]\">\n\n\n    <h2 class=\"[ heading__secondary ]\">\n       {{ task?.name }}\n    </h2>\n    \n\n    <form class=\"[ px-14 pt-6 pb-10 my-8 ] [ bg-background ] [ rounded-lg shadow-2xl ]\" [formGroup]=\"newTaskForm\">\n    \n\n        <div class=\"[ my-4 ]\">\n\n            <label for=\"task-name\">Name</label>\n            <input class=\"[ input__primary ]\" type=\"text\" placeholder=\"task name\" required name=\"name\"\n                formControlName=\"name\" id=\"task-name\"/>\n\n            <div *ngIf=\"(newTaskForm.get('name').dirty)\">\n                <div *ngIf=\"newTaskForm.get('name').errors?.required\">Name is required</div>\n            </div>\n\n        </div>\n\n        \n        <div class=\"[ my-4 ]\">\n\n            <label for=\"task-users\">Users required</label>\n            <input class=\"[ input__primary ]\" type=\"number\" required name=\"usersRequired\"\n                formControlName=\"usersRequired\" id=\"task-users\"/>\n\n            <div *ngIf=\"(newTaskForm.get('usersRequired').dirty)\">\n                <div *ngIf=\"newTaskForm.get('usersRequired').errors?.min\">At least one user is required</div>\n            </div>\n\n        </div>\n\n        \n    </form>\n\n\n        <div>\n\n            <app-update-survey (updateSurvey)=\"updateSurvey($event)\" [task]=\"task\" *ngIf=\"task?.type\"></app-update-survey>\n            <app-update-card-sorting *ngIf=\"task?.type === 'Card sorting'\"></app-update-card-sorting>\n            <app-update-tree-test *ngIf=\"task?.type === 'Tree test'\"></app-update-tree-test>\n    \n        </div>   \n\n\n    <div class=\"[ overlay__white ]\" *ngIf=\"taskPosting || taskPosted\">\n    \n        \n        <div class=\"[ flex flex-col items-center ]\" *ngIf=\"taskPosting\">\n            <div  class=\"lds-facebook\"><div></div><div></div><div></div></div>\n            <p class=\"[ text-4xl font-bold ]\">Updating Task</p>\n        </div>\n\n        <div class=\"[ flex flex-col items-center ]\" *ngIf=\"taskPosted\">\n            <span class=\"[ text-6xl font-bold text-green-400 ]\">✔</span>\n            <p class=\"[ text-4xl font-bold ]\">Task updated</p>\n        </div>\n\n\n    </div>\n\n\n</div>","import { RouterModule, Routes } from \"@angular/router\";\n\nimport { NgModule } from \"@angular/core\";\nimport { UpdateTaskComponent } from \"./update-task.component\";\nimport { AuthGuardService } from \"src/app/shared/guards/auth-guard.service\";\n\nconst routes: Routes = [\n{ path: '', component: UpdateTaskComponent, canActivate: [AuthGuardService] },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class UpdateTasksRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport { UpdateTasksRoutingModule} from './update-task-routing.module';\nimport { UpdateTaskComponent} from './update-task.component';\nimport { UpdateSurveyComponent } from './components/update-survey/update-survey.component';\nimport { UpdateCardSortingComponent } from './components/update-card-sorting/update-card-sorting.component';\nimport { UpdateTreeTestComponent } from './components/update-tree-test/update-tree-test.component';\n\n\n\n\n@NgModule({\n  declarations: [UpdateTaskComponent, UpdateSurveyComponent, UpdateCardSortingComponent, UpdateTreeTestComponent],\n  imports: [\n    CommonModule,\n    UpdateTasksRoutingModule,\n    FormsModule,\n    ReactiveFormsModule\n  ]\n})\nexport class UpdateTasksModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-update-card-sorting',\n  templateUrl: './update-card-sorting.component.html',\n  styleUrls: ['./update-card-sorting.component.css']\n})\nexport class UpdateCardSortingComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>update-card-sorting works!</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-update-tree-test',\n  templateUrl: './update-tree-test.component.html',\n  styleUrls: ['./update-tree-test.component.css']\n})\nexport class UpdateTreeTestComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>update-tree-test works!</p>\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators, FormArray } from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport { AppState } from 'src/app/app.reducers';\nimport { Task } from 'src/app/campaign/models/task.model';\n\n@Component({\n  selector: 'app-update-survey',\n  templateUrl: './update-survey.component.html',\n  styleUrls: ['./update-survey.component.css']\n})\nexport class UpdateSurveyComponent implements OnInit {\n\n  public newSurveyForm: FormGroup;\n  @Output() updateSurvey: EventEmitter<any> = new EventEmitter();\n  @Input() task: Task\n  \n  constructor(private fb: FormBuilder, private store: Store<AppState>) {\n  }\n  \n  ngOnInit(): void {\n    this.updateForm()\n  }\n\n  updateForm() {\n    this.newSurveyForm = this.fb.group({\n      questions: this.fb.array(this.currentQuestions())\n    }\n    );\n  }\n\n  addQuestion(type) {\n    switch (type) {\n      case 'options':\n        this.surveryQuestions.push(this.newOptionsQuestion())\n        break;\n\n      case 'likert':\n        this.surveryQuestions.push(this.newLikertScaleQuestion())\n        break;\n    }\n  }\n\n  deleteQuestion(i) {\n    this.surveryQuestions.removeAt(i)\n  }\n\n  currentQuestions() {\n\n    return this.task.questions.map(({ question, type, options, multipleChoice, tags }) => {\n\n      return this.fb.group({\n        question: [question, [Validators.required]],\n        type: [type],\n        options: [options, [Validators.required]],\n        tags: [tags, [Validators.required]],\n        multipleChoice: [multipleChoice],\n\n      })\n\n    })\n\n  }\n\n  newOptionsQuestion(): FormGroup {\n    return this.fb.group({\n      question: [\"\", [Validators.required]],\n      type: [\"options\"],\n      options: [\"\", [Validators.required]],\n      multipleChoice: [false],\n    });\n  }\n\n  newLikertScaleQuestion(): FormGroup {\n    return this.fb.group({\n      question: [\"\", [Validators.required]],\n      type: [\"likert\"],\n      tags: [\"\", [Validators.required]]\n    });\n  }\n\n  onSubmit() {\n     this.updateSurvey.emit(this.newSurveyForm.value)\n  }\n\n  get surveryQuestions() {\n    return this.newSurveyForm.get('questions') as FormArray;\n  }\n}\n","<h3 class=\"[ heading__secondary ]\">My Survey</h3>\n\n<form class=\"[ p-14 my-8 ] [ bg-background ] [ rounded-lg shadow-2xl ]\" (ngSubmit)=\"onSubmit()\" [formGroup]=\"newSurveyForm\">\n\n\n    <div formArrayName=\"questions\">\n\n        <div class=\"[ mb-16 ]\" *ngFor=\"let item of surveryQuestions.controls; let i=index\" [formGroupName]=\"i\">\n\n                <h4 class=\"[ font-bold text-xl ]\">Question {{i+1}}</h4>\n\n           \n                    <button class=\"[ float-right -mt-6 ] [ underline ]\" (click)=\"deleteQuestion(i)\">Remove</button>\n            \n\n                <div class=\"[ my-4 ]\">\n\n                    <label class=\"[ hidden ]\" [for]=\"'question'+ i\">Question</label>\n                    <input class=\"[ input__primary ]\" type=\"text\" placeholder=\"Write your question\" required\n                        [name]=\"'question'+ i\" [formControlName]=\"'question'\" [id]=\"'question'+ i\" />\n\n                </div>\n\n                <div class=\"[ my-4 ]\" *ngIf=\"item.value.options?.length > 0\">\n\n                    <label [for]=\"'options'+ i\">Options</label>\n                    <input class=\"[ input__primary ]\" type=\"text\" placeholder=\"Type the options separated by commas\"\n                        required name=\"options\" formControlName=\"options\" [id]=\"'options'+ i\" />\n\n                </div>\n\n\n                <div class=\"[ my-4 ]\" *ngIf=\"item.value.multipleChoice !== undefined\">\n\n                    <input type=\"checkbox\" name=\"multipleChoice\" formControlName=\"multipleChoice\"\n                    [id]=\"'multipleChoice'+ i\" />\n                    <label class=\"[ ml-3 ]\" [for]=\"'multipleChoice'+ i\">Allow user to choose multiple answers</label>\n\n                </div>\n\n                <div class=\"[ my-4 ]\" *ngIf=\"item.value.tags?.length > 0\">\n\n                    <label [for]=\"'tags'+ i\">Tags</label>\n                    <p>Tags are unique answers your question, users will only be able to pick one</p>\n                    <input class=\"[ input__primary ]\" type=\"text\" placeholder=\"Type the tags separated by commas\"\n                        required name=\"tags\" formControlName=\"tags\" [id]=\"'tags'+ i\" />\n\n                </div>\n\n        </div>\n\n    </div>\n\n    <div class=\"[ grid grid-cols-2 mt-10 ]\">\n        <button class=\"[ btn__primary-light ] [ mx-2 ]\" (click)=\"addQuestion('options')\">Add options question</button>\n        <button class=\"[ btn__primary-light ] [ mx-2 ]\" (click)=\"addQuestion('likert')\">Add likert scale questions</button>\n    </div>\n    \n</form>\n\n<button class=\"[ btn__primary-color w-full my-10  ]\" type=\"submit\" (click)=\"onSubmit()\">Update Task</button>"],"sourceRoot":"webpack:///"}