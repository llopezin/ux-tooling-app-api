{"version":3,"sources":["./src/app/tasks/create-task/create-task-routing.module.ts","./src/app/tasks/create-task/components/create-card-sorting/create-card-sorting.component.ts","./src/app/tasks/create-task/components/create-card-sorting/create-card-sorting.component.html","./src/app/tasks/create-task/create-task.component.ts","./src/app/tasks/create-task/create-task.component.html","./src/app/tasks/create-task/components/create-survey/create-survey.component.ts","./src/app/tasks/create-task/components/create-survey/create-survey.component.html","./src/app/tasks/create-task/components/create-tree-test/create-tree-test.component.ts","./src/app/tasks/create-task/components/create-tree-test/create-tree-test.component.html","./src/app/tasks/create-task/create-task.module.ts"],"names":[],"mappings":"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","file":"tasks-create-task-create-task-module.js","sourcesContent":["import { RouterModule, Routes } from \"@angular/router\";\n\nimport { NgModule } from \"@angular/core\";\nimport { CreateTaskComponent } from \"./create-task.component\";\nimport { AuthGuardService } from \"src/app/shared/guards/auth-guard.service\";\n\nconst routes: Routes = [\n{ path: '', component: CreateTaskComponent, canActivate: [AuthGuardService] },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class TasksRoutingModule { }\n","import {Component, OnInit, EventEmitter, Output} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators, FormArray} from '@angular/forms';\nimport {Store} from '@ngrx/store';\nimport {AppState} from 'src/app/app.reducers';\n\n@Component({\n  selector: 'app-create-card-sorting',\n  templateUrl: './create-card-sorting.component.html',\n  styleUrls: ['./create-card-sorting.component.css']\n})\nexport class CreateCardSortingComponent implements OnInit {\n\n    public newCardSortingForm: FormGroup;\n    public categories: string[] = [];\n    public cards: string[] = []\n    public instructionsCopy = \"Please, assign the following cards to the category you believe they should belong to\"\n    @Output() createCardSorting: EventEmitter<any> = new EventEmitter();\n    \n    constructor(private fb: FormBuilder, private store: Store<AppState>) {\n    }\n    \n    ngOnInit(): void {\n      this.createForm()\n    }\n  \n    createForm() {\n      this.newCardSortingForm = this.fb.group({\n        instructions: [ this.instructionsCopy, [Validators.required]],\n        category: [\"\", [Validators.required]],\n        card: [\"\", [Validators.required]], \n      }\n      );\n    }\n\n    addCategory(){\n      let category = this.newCardSortingForm.value.category\n      if(!category)return\n      this.categories.push(category)\n      this.newCardSortingForm.patchValue({category: \"\"})\n    }\n\n    addCard(){\n      let card = this.newCardSortingForm.value.card\n      if(!card)return\n      this.cards.push(card)\n      this.newCardSortingForm.patchValue({card: \"\"})\n    }\n\n\n    onSubmit() {\n      let instructions = this.newCardSortingForm.get('instructions').value\n      let {categories, cards} = this\n      if(!categories || !cards)return;\n\n      this.createCardSorting.emit({categories, cards, instructions})\n    }\n    \n    deleteCategory(i) {\n      this.categories.splice(i, 1)\n    }\n    \n    deleteCard(i) {\n      this.cards.splice(i, 1)    }\n  }\n\n","<form class=\"[ p-14 my-8 ] [ bg-background ] [ rounded-lg shadow-2xl ]\"\n    [formGroup]=\"newCardSortingForm\">\n\n\n\n    <h3 class=\"[ font-bold my-2 ]\">Intructions</h3>\n\n \n    <div>\n\n            <label class=\"[ hidden ]\" for=\"instructions\">instructions</label>\n            <textarea class=\"[ input__primary ]\" cols=\"30\" rows=\"4\"   required\n                name=\"instructions\" [formControlName]=\"'instructions'\" id=\"instructions\"></textarea>\n\n    </div>\n\n\n\n\n\n    <h3 class=\"[ font-bold my-2 ]\">Task categories</h3>\n\n    <div *ngIf=\"categories.length > 0\" class=\"[ m-8 ]  [ border border-b-0 border-primary ]\">\n\n        <div class=\"[ flex justify-between p-3 ] [ bg-white ] [ border-b border-primary  ]\" *ngFor=\"let category of categories ; let i=index\">\n            <p>{{category}}</p>\n            <button class=\"[ underline ]\" (click)=\"deleteCategory(i)\">Remove</button>\n        </div>\n\n    </div>\n\n\n\n    <div class=\"[ flex mb-8 mt-5]\">\n\n        <div class=\"[ flex-grow ]\">\n\n            <label class=\"[ hidden ]\" for=\"category\">Category</label>\n            <input class=\"[ input__primary ]\" type=\"text\" placeholder=\"Write your category name\" required\n                name=\"category\" [formControlName]=\"'category'\" id=\"category\"/>\n\n        </div>\n\n\n        <div>\n            <button class=\"[ btn__primary-light ] [ mx-2 ]\" (click)=\"addCategory()\">Add category</button>\n        </div>\n\n    </div>\n\n\n\n\n    <h3 class=\"[ font-bold my-2 ]\">Cards</h3>\n\n    <div *ngIf=\"cards.length > 0\" class=\"[ flex m-5 flex-wrap ]\">\n\n        <div class=\"[ lozenge ] [ flex justify-between flex-wrap p-2 mx-2 mb-2 ] [ bg-white ]\" *ngFor=\"let card of cards ; let i=index\">\n            <p>{{card}}</p>\n            <button class=\"[ ml-2 ] [ font-bold text-contrast ]\" (click)=\"deleteCard(i)\">x</button>\n        </div>\n\n    </div>\n\n\n    <div class=\"[ flex ]\">\n\n        <div class=\"[ flex-grow ]\">\n\n            <label class=\"[ hidden ]\" for=\"card\">Card</label>\n            <input class=\"[ input__primary ]\" type=\"text\" placeholder=\"Write card name\" required name=\"card\"\n                [formControlName]=\"'card'\" id=\"card\" (keyup.enter)=\"addCard()\" />\n\n        </div>\n\n        <div>\n            <button class=\"[ btn__primary-light ] [ mx-3 ]\" (click)=\"addCard()\">Add card</button>\n        </div>\n\n    </div>\n\n\n\n\n</form>\n\n<button class=\"[ btn__primary-color w-full my-10  ]\" type=\"submit\" (click)=\"onSubmit()\">Create Task</button>","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { AppState } from 'src/app/app.reducers';\nimport { Task } from 'src/app/campaign/models/task.model';\nimport { Campaign } from 'src/app/dashboard/models/campaign.model';\nimport { addTask, getCampaigns, getWorkspace } from 'src/app/shared/store/workspace-store/workspace.actions';\n\n@Component({\n  selector: 'app-create-task',\n  templateUrl: './create-task.component.html',\n  styleUrls: ['./create-task.component.css']\n})\nexport class CreateTaskComponent implements OnInit {\n\n  public newTaskForm: FormGroup;\n  public type: FormControl;\n  public campaign_id: string;\n  public taskPosting: boolean;\n  public taskPosted: boolean;\n  public task: Task;\n  public campaign: Campaign\n\n  constructor(private fb: FormBuilder, private store: Store<AppState>, private router: Router, private route: ActivatedRoute) {\n\n    this.type = new FormControl(' ', [Validators.required]);\n    this.campaign_id = this.route.snapshot.paramMap.get('id');\n\n  }\n\n  ngOnInit(): void {\n    this.createForm()\n\n    this.store.select('workspaceApp').subscribe(state => {\n      if (state.loading) return\n\n      const workspace = state.workspace\n      const campaingsAreStored = !!workspace?.campaigns\n\n      if (!workspace) { this.store.dispatch(getWorkspace()) }\n      if (!campaingsAreStored) { this.getCamapigns(workspace); return }\n      if (!this.campaign) this.campaign = this.findCampaign(state)\n      if (this.currentTaskIsPosted(state)) this.onTaskPosted()\n\n    })\n  }\n\n  getCamapigns(workspace) {\n    this.store.dispatch(getCampaigns({ campaign_ids: workspace.campaign_ids }))\n  }\n\n  onTaskPosted() {\n    this.taskPosting = false; this.taskPosted = true; this.navigateToCampaign()\n  }\n\n  createForm() {\n    this.newTaskForm = this.fb.group({\n      name: [\"\", [Validators.required]],\n      usersRequired: [5, [Validators.required, Validators.min(1)]],\n      type: this.type,\n    });\n  }\n\n  createSurvey({ questions }) {\n    this.task = { ...this.newTaskForm.value, questions, responses: [] }\n    this.sendTask()\n  }\n\n  createCardSorting({ instructions, cards, categories }) {\n    this.task = { ...this.newTaskForm.value, instructions, cards, categories, responses: [] }\n    this.sendTask()\n  }\n\n\n  createTreetest({instructions, tasks, headings}) {\n    this.task = { ...this.newTaskForm.value, instructions, tasks, headings, responses: [] }\n    this.sendTask()\n  }\n\n  sendTask() {\n    this.store.dispatch(addTask({ task: this.task, campaign_id: this.campaign_id }))\n    this.taskPosting = true\n  }\n\n  findCampaign(state) {\n    const campaign = state.workspace.campaigns.find(campaign => campaign._id == this.campaign_id)\n    return campaign\n  }\n\n  currentTaskIsPosted(state) {\n    const storedCampaign = this.findCampaign(state)\n    this.campaign.user_task_ids = this.campaign?.user_task_ids || []\n\n    const taskIsPosted = storedCampaign.user_task_ids.length > this.campaign?.user_task_ids?.length\n\n    return taskIsPosted\n  }\n\n  navigateToCampaign() {\n    this.router.navigate([`campaign/${this.campaign_id}`]);\n  }\n}\n","<div class=\"[ max-w-screen-lg mx-auto pt-8 ]\">\n\n\n    <h2 class=\"[ heading__secondary ]\">\n        New Task\n    </h2>\n    \n\n    <form class=\"[ px-14 pt-6 pb-10 my-8 ] [ bg-background ] [ rounded-lg shadow-2xl ]\" [formGroup]=\"newTaskForm\">\n    \n\n        <div class=\"[ my-4 ]\">\n\n            <label for=\"task-name\">Name</label>\n            <input class=\"[ input__primary ]\" type=\"text\" placeholder=\"task name\" required name=\"name\"\n                formControlName=\"name\" id=\"task-name\"/>\n\n            <div *ngIf=\"(newTaskForm.get('name').dirty)\">\n                <div *ngIf=\"newTaskForm.get('name').errors?.required\">Name is required</div>\n            </div>\n\n        </div>\n\n        \n        <div class=\"[ my-4 ]\">\n\n            <label for=\"task-users\">Users required</label>\n            <input class=\"[ input__primary ]\" type=\"number\" required name=\"usersRequired\"\n                formControlName=\"usersRequired\" id=\"task-users\"/>\n\n            <div *ngIf=\"(newTaskForm.get('usersRequired').dirty)\">\n                <div *ngIf=\"newTaskForm.get('usersRequired').errors?.min\">At least one user is required</div>\n            </div>\n\n        </div>\n\n        <div class=\"[ my-4 ]\">   \n\n            <label for=\"task-type\">Type</label>      \n            <select  class=\"[ input__primary ]\" required name=\"type\"\n            formControlName=\"type\" id=\"task-type\">\n                <option value=\"Survey\" selected>Survey</option>\n                <option value=\"Tree test\">Tree test</option>\n                <option value=\"Card sorting\">Card sorting</option>\n            </select>\n\n        </div>\n\n    \n    </form>\n\n    <button class=\"[ btn__primary-color w-full mt-10 ]\" *ngIf=\"newTaskForm.get('type').value.length === 1\">Create Task</button>\n\n        <div>\n\n            <app-create-survey (createSurvey)=\"createSurvey($event)\" *ngIf=\"type.value === 'Survey'\"></app-create-survey>\n            <app-create-card-sorting (createCardSorting)=\"createCardSorting($event)\" *ngIf=\"type.value === 'Card sorting'\"></app-create-card-sorting>\n            <app-create-tree-test (createTreetest)=\"createTreetest($event)\" *ngIf=\"type.value === 'Tree test'\"></app-create-tree-test>\n    \n        </div>   \n        \n        \n\n    <div class=\"[ overlay__white ]\" *ngIf=\"taskPosting || taskPosted\">\n    \n        \n        <div class=\"[ flex flex-col items-center ]\" *ngIf=\"taskPosting\">\n            <div  class=\"lds-facebook\"><div></div><div></div><div></div></div>\n            <p class=\"[ text-4xl font-bold ]\">Creating Task</p>\n        </div>\n\n        <div class=\"[ flex flex-col items-center ]\" *ngIf=\"taskPosted\">\n            <span class=\"[ text-6xl font-bold text-green-400 ]\">✔</span>\n            <p class=\"[ text-4xl font-bold ]\">Task created</p>\n        </div>\n\n\n    </div>\n\n\n</div>","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators, FormArray } from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport { AppState } from 'src/app/app.reducers';\n\n@Component({\n  selector: 'app-create-survey',\n  templateUrl: './create-survey.component.html',\n  styleUrls: ['./create-survey.component.css']\n})\nexport class CreateSurveyComponent implements OnInit {\n  public newSurveyForm: FormGroup;\n  @Output() createSurvey: EventEmitter<any> = new EventEmitter();\n\n  constructor(private fb: FormBuilder, private store: Store<AppState>) {\n  }\n\n  ngOnInit(): void {\n    this.createForm()\n  }\n\n  createForm() {\n    this.newSurveyForm = this.fb.group({\n      questions: this.fb.array([this.newOptionsQuestion()])\n    }\n    );\n  }\n\n  addQuestion(type) {\n    switch (type) {\n      case 'options':\n        this.surveryQuestions.push(this.newOptionsQuestion())\n        break;\n\n      case 'likert':\n        this.surveryQuestions.push(this.newLikertScaleQuestion())\n        break;\n    }\n  }\n\n  deleteQuestion(i) {\n    this.surveryQuestions.removeAt(i)\n  }\n\n  newOptionsQuestion(): FormGroup {\n    return this.fb.group({\n      question: [\"\", [Validators.required]],\n      type: [\"options\"],\n      options: [\"\", [Validators.required]],\n      multipleChoice: [false],\n    });\n  }\n\n  newLikertScaleQuestion(): FormGroup {\n    return this.fb.group({\n      question: [\"\", [Validators.required]],\n      type: [\"likert\"],\n      tags: [\"\", [Validators.required]]\n    });\n  }\n\n  onSubmit() {\n    if (!this.newSurveyForm.valid) return\n    this.createSurvey.emit(this.newSurveyForm.value)\n  }\n\n  get surveryQuestions() {\n    return this.newSurveyForm.get('questions') as FormArray;\n  }\n}\n","\n<form class=\"[ p-14 my-8 ] [ bg-background ] [ rounded-lg shadow-2xl ]\" (ngSubmit)=\"onSubmit()\" [formGroup]=\"newSurveyForm\">\n\n\n    <div formArrayName=\"questions\">\n\n        <div class=\"[ mb-16 ]\" *ngFor=\"let item of surveryQuestions.controls; let i=index\" [formGroupName]=\"i\">\n\n                <h4 class=\"[ font-bold text-xl ]\">Question {{i+1}}</h4>\n\n           \n                    <button class=\"[ float-right -mt-6 ] [ underline ]\" (click)=\"deleteQuestion(i)\">Remove</button>\n            \n\n                <div class=\"[ my-4 ]\">\n\n                    <label class=\"[ hidden ]\" [for]=\"'question'+ i\">Question</label>\n                    <input class=\"[ input__primary ]\" type=\"text\" placeholder=\"Write your question\" required\n                        [name]=\"'question'+ i\" [formControlName]=\"'question'\" [id]=\"'question'+ i\" />\n\n                </div>\n\n                <div class=\"[ my-4 ]\" *ngIf=\"item.value.options !== undefined\">\n\n                    <label [for]=\"'options'+ i\">Options</label>\n                    <input class=\"[ input__primary ]\" type=\"text\" placeholder=\"Type the options separated by commas\"\n                        required name=\"options\" formControlName=\"options\" [id]=\"'options'+ i\" />\n\n                </div>\n\n\n                <div class=\"[ my-4 ]\" *ngIf=\"item.value.multipleChoice !== undefined\">\n\n                    <input type=\"checkbox\" name=\"multipleChoice\" formControlName=\"multipleChoice\"\n                    [id]=\"'multipleChoice'+ i\" />\n                    <label class=\"[ ml-3 ]\" [for]=\"'multipleChoice'+ i\">Allow user to choose multiple answers</label>\n\n                </div>\n\n                <div class=\"[ my-4 ]\" *ngIf=\"item.value.tags !== undefined\">\n\n                    <label [for]=\"'tags'+ i\">Tags</label>\n                    <p>Tags are unique answers your question, users will only be able to pick one</p>\n                    <input class=\"[ input__primary ]\" type=\"text\" placeholder=\"Type the tags separated by commas\"\n                        required name=\"tags\" formControlName=\"tags\" [id]=\"'tags'+ i\" />\n\n                </div>\n\n        </div>\n\n    </div>\n\n    <div class=\"[ grid grid-cols-2 mt-10 ]\">\n        <button class=\"[ btn__primary-light ] [ mx-2 ]\" (click)=\"addQuestion('options')\">Add options question</button>\n        <button class=\"[ btn__primary-light ] [ mx-2 ]\" (click)=\"addQuestion('likert')\">Add likert scale questions</button>\n    </div>\n    \n</form>\n\n<button class=\"[ btn__primary-color w-full my-10  ]\" type=\"submit\" (click)=\"onSubmit()\">Create Task</button>","import { THIS_EXPR } from '@angular/compiler/src/output/output_ast';\nimport { Component, ElementRef, OnInit, Output, ViewChild, EventEmitter } from '@angular/core';\nimport { FormArray, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { treeHeadingValidator } from './validators/tree-heading.validator';\n\n\n@Component({\n  selector: 'app-create-tree-test',\n  templateUrl: './create-tree-test.component.html',\n  styleUrls: ['./create-tree-test.component.css']\n})\nexport class CreateTreeTestComponent implements OnInit {\n\n  public treeTestForm: FormGroup;\n  public treeTestTasksForm: FormGroup;\n  public treeCompleted: boolean = false;\n  public headings: any = {  };\n  public inputOpened: boolean = true\n  public selectedParent: any;\n  @ViewChild(\"mainInput\") mainInput: ElementRef;\n  @Output() createTreetest: EventEmitter<any> = new EventEmitter\n\n  constructor(private fb: FormBuilder) { }\n\n  ngOnInit(): void {\n    this.createHeadingsForm()\n    this.createTasksForm()\n  }\n\n  order(a, b) {\n    return 1;\n  }\n\n  addHeading() {\n    let heading = this.treeTestForm.value.heading\n    this.headings.push({ [`${heading}`]: [] })\n    this.inputOpened = false\n  }\n\n  createHeadingsForm() {\n    this.treeTestForm = this.fb.group({\n      heading: [\"\"],\n    }\n    );\n  }\n\n  createTasksForm() {\n    this.treeTestTasksForm = this.fb.group({\n      instructions: [\"\"],\n      tasks: this.fb.array([this.newTask()])\n    }\n    );\n  }\n\n  addTask() {\n    this.treeTasks.push(this.newTask())\n  }\n\n  newTask(): FormGroup {\n    return this.fb.group({\n      task: [\"\", [Validators.required]],\n    });\n  }\n\n  addSibling(e, target) {\n    this.inputOpened = true\n    let parent = e.target.parentElement.parentElement.parentElement\n\n    this.findDataParent(parent)\n    target?.nativeElement.scrollIntoView()\n    this.mark(e.target.parentElement)\n    this.treeTestForm.reset()\n  }\n\n  addChild(e, target) {\n    this.inputOpened = true\n    let parent = e.target.parentElement.parentElement\n\n    this.findDataParent(parent)\n    target?.nativeElement.scrollIntoView()\n    this.mark(e.target.parentElement)\n    this.treeTestForm.reset()\n  }\n\n  mark(node) {\n    node?.classList.add(\"selected\")\n  }\n\n  unmark() {\n    let selected = document.querySelector(\".selected\")\n    selected?.classList.remove(\"selected\")\n  }\n\n  remove(e) {\n    let parent = e.target.parentElement.parentElement.parentElement\n    let elem = e.target.parentElement.parentElement.id\n    let path = this.findPath(parent)\n\n\n    let dataParent = this.headings\n    path.forEach(childHeading => {\n      dataParent = dataParent[childHeading]\n    })\n\n    delete dataParent[elem]\n\n    if (Object.keys(this.headings).length === 0) this.reset()\n  }\n\n  reset() {\n    this.inputOpened = true\n    this.selectedParent = this.headings\n    this.treeTestForm.reset()\n  }\n\n  findDataParent(parent) {\n    let dataParent = this.headings\n\n    this.findPath(parent).forEach(childHeading => { dataParent = dataParent[childHeading] })\n    this.selectedParent = dataParent\n  }\n\n  findPath(parent) {\n    const path = []\n\n    while (parent.id != \"headings\") {\n      path.push(parent.id)\n      parent = parent.parentElement\n    }\n\n    return path.reverse()\n  }\n\n  add() {\n    let name = this.treeTestForm.value.heading\n    if (!this.selectedParent) this.selectedParent = this.headings\n    this.selectedParent[name] = {}\n    this.inputOpened = false\n    this.unmark()\n  }\n\n  createTask() {\n    this.createTreetest.emit({ \n      headings: this.headings,\n      instructions: this.treeTestTasksForm.value.instructions, \n      tasks: this.treeTestTasksForm.value.tasks\n     })\n  }\n\n  get treeTasks() {\n    return this.treeTestTasksForm.get('tasks') as FormArray;\n  }\n\n}\n","<div class=\"[ p-14 mt-8  mb-48 ] [ bg-background ] [ rounded-lg shadow-2xl ]\">\n\n    <div *ngIf=\"!treeCompleted\">\n\n        <h3 class=\"[ heading__secondary ] [ mb-3 ]\">Your tree</h3>\n\n        <p class=\"[ mb-8 ]\">Add items to create your tree. Users will navigate through the tree to find an item of your\n            choice.</p>\n\n        <form [formGroup]=\"treeTestForm\" *ngIf=\"inputOpened\">\n\n\n            <div #mainInput class=\"[ my-8 flex ]\">\n\n                <label class=\"[ hidden ]\" for=\"heading\">heading</label>\n                <input class=\"[ input__primary ]\" type=\"text\" placeholder=\"Type tree item\" name=\"heading\"\n                    formControlName=\"heading\" id=\"heading\" />\n\n                <button class=\"[ btn__primary-color mx-3 ]\" (click)=\"add()\">add</button>\n\n            </div>\n\n\n        </form>\n\n\n\n\n        <div id=\"headings\">\n\n            <div class=\"[ border-t border-primary mt-1 ]\"\n                *ngFor=\"let level1 of headings | keyvalue : order; let i = index\" [id]=\"level1.key\">\n                <div class=\"[ tt__item ]\">\n                    <div class=\"[ tt__heading ]\">{{level1.key}}</div>\n                    <button class=\"[ tt__button btn__primary-light ]\" *ngIf=\"i===0\"\n                        (click)=\"addSibling($event, mainInput)\">category</button>\n                    <button class=\"[ tt__button btn__primary-color ]\" (click)=\"addChild($event, mainInput)\">{{i === 0 ?\n                        \"child\" : \"\"}}</button>\n                    <button class=\"[ tt__button--remove ]\" (click)=\"remove($event)\">remove</button>\n                </div>\n\n                <div class=\"[ ml-8 ]\" *ngFor=\"let level2 of level1.value | keyvalue : order; let i = index\"\n                    [id]=\"level2.key\">\n                    <div class=\"[ tt__item ]\">\n                        <div class=\"[ tt__heading ]\">{{level2.key}}</div>\n                        <button class=\"[ tt__button btn__primary-color ]\" (click)=\"addChild($event, mainInput)\"\n                            title=\"add child\"></button>\n                        <button class=\"[ tt__button--remove ]\" (click)=\"remove($event)\">remove</button>\n                    </div>\n\n                    <div class=\"[ ml-16 ]\" *ngFor=\"let level3 of level2.value | keyvalue : order; let i = index\"\n                        [id]=\"level3.key\">\n                        <div class=\"[ tt__item ]\">\n                            <div class=\"[ tt__heading ]\">{{level3.key}}</div>\n                            <button class=\"[ tt__button btn__primary-color ]\" (click)=\"addChild($event, mainInput)\"\n                                title=\"add child\"></button>\n                            <button class=\"[ tt__button--remove ]\" (click)=\"remove($event)\">remove</button>\n                        </div>\n\n                        <div class=\"[ ml-24 ]\" *ngFor=\"let level4 of level3.value | keyvalue : order; let i = index\"\n                            [id]=\"level4.key\">\n                            <div class=\"[ tt__item ]\">\n                                <div class=\"[ tt__heading ]\">{{level4.key}}</div>\n                                <button class=\"[ tt__button btn__primary-color ]\" (click)=\"addChild($event, mainInput)\"\n                                    title=\"add child\"></button>\n                                <button class=\"[ tt__button--remove ]\" (click)=\"remove($event)\">remove</button>\n                            </div>\n\n                            <div class=\"[ ml-32 ]\" *ngFor=\"let level5 of level4.value | keyvalue : order; let i = index\"\n                                [id]=\"level5.key\">\n                                <div class=\"[ tt__item ]\">\n                                    <div class=\"[ tt__heading ]\">{{level5.key}}</div>\n                                    <button class=\"[ tt__button--remove ]\" (click)=\"remove($event)\">remove</button>\n                                </div>\n                            </div>\n\n                        </div>\n\n                    </div>\n\n                </div>\n\n            </div>\n\n        </div>\n\n        <div *ngFor=\"let level1 of headings | keyvalue : order; let i = index\">\n            <button (click)=\"treeCompleted = true\" *ngIf=\"i===0\" class=\"[ btn__primary-color w-full mt-10 ]\">Create tree\n                tasks</button>\n        </div>\n\n    </div>\n\n    <div *ngIf=\"treeCompleted\">\n\n        <h3 class=\"[ heading__secondary ] [ mb-3  mt-4 ]\">Tree tasks</h3>\n\n        <p class=\"[ mb-8 ]\">Give your users a set of tasks to complete using your tree. Add some general instructions to\n            set\n            an schenario, this will help your users get into hte mindset a real life situation.</p>\n\n\n        <form [formGroup]=\"treeTestTasksForm\">\n\n            <label for=\"instructions\">Instructions (optional)</label>\n            <textarea class=\"[ block w-full ]\" id=\"instructions\" rows=\"3\" name=\"instructions\"\n                formControlName=\"instructions\"></textarea>\n\n            <div formArrayName=\"tasks\">\n\n                <div class=\"[ mb-16 ]\" *ngFor=\"let task of treeTasks.controls; let i=index\" [formGroupName]=\"i\">\n\n                    <div class=\"[ my-8 ]\">\n\n                        <label [for]=\"'task'+i\">Task {{i + 1}}</label>\n                        <input class=\"[ input__primary ] [ mb-4 ]\" type=\"text\" placeholder=\"Task\" name=\"heading\"\n                            formControlName=\"task\" [id]=\"'task'+i\" />\n\n                    </div>\n\n\n                </div>\n\n            </div>\n\n\n        </form>\n\n        <div class=\"[ flex justify-end ]\">\n            <button class=\"[ btn__primary-light back-arrow ]\" (click)=\"treeCompleted = false\">Back to tree</button>\n            <button class=\"[ btn__primary-color mx-3 ]\" (click)=\"addTask()\">add task</button>\n        </div>\n\n\n        <div>\n\n            <button class=\"[ btn__primary-color w-full mt-10 ]\" *ngIf=\"treeTestTasksForm.valid\" (click)=\"createTask()\">Create Task</button>\n\n        </div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {TasksRoutingModule} from './create-task-routing.module';\nimport {CreateTaskComponent} from './create-task.component';\nimport { CreateSurveyComponent } from './components/create-survey/create-survey.component';\nimport { CreateCardSortingComponent } from './components/create-card-sorting/create-card-sorting.component';\nimport { CreateTreeTestComponent } from './components/create-tree-test/create-tree-test.component';\n\n\n\n\n\n@NgModule({\n  declarations: [CreateTaskComponent, CreateSurveyComponent, CreateCardSortingComponent, CreateTreeTestComponent],\n  imports: [\n    CommonModule,\n    TasksRoutingModule,\n    FormsModule,\n    ReactiveFormsModule\n  ]\n})\nexport class TasksModule { }\n"],"sourceRoot":"webpack:///"}